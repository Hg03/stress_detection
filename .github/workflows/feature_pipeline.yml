name: Feature Pipeline

on:
  # Trigger on push to main branch
  push:
    branches: [ main, develop ]
    paths:
      - 'src/stress_detection/pipelines/feature_pipeline.py'
      - 'src/stress_detection/feature_store/**'
      - 'src/stress_detection/data/**'
      - '.github/workflows/feature_pipeline.yaml'
  
  # Trigger on pull requests
  pull_request:
    branches: [ main ]
    paths:
      - 'src/stress_detection/pipelines/feature_pipeline.py'
      - 'src/stress_detection/feature_store/**'
      - 'src/stress_detection/data/**'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
  
  # Schedule to run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.10"
  REGISTRY_PATH: "ghcr.io/${{ github.repository }}"

jobs:
  feature-pipeline:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis/redis-stack:latest
        ports:
          - 6379:6379
          - 8001:8001
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: pip install uv

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Create virtual environment and install dependencies
        run: |
          uv venv .venv
          uv pip install -e ".[dev]" --python .venv/bin/python

      - name: Activate virtual environment
        run: echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV && echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Set up environment variables
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $SUPABASE_URL
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
          echo "DAGSHUB_USERNAME=${{ secrets.DAGSHUB_USERNAME }}" >> $GITHUB_ENV
          echo "DAGSHUB_TOKEN=${{ secrets.DAGSHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Wait for Redis to be ready
        run: |
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: Run feature pipeline tests (if any)
        run: |
          # Run any tests related to feature pipeline
          if [ -f "tests/test_feature_pipeline.py" ]; then
            python -m pytest tests/test_feature_pipeline.py -v
          fi

      - name: Run feature pipeline
        run: |
          python src/stress_detection/pipelines/feature_pipeline.py
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

      - name: Upload feature pipeline artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: feature-pipeline-artifacts
          path: |
            data/
            logs/
            *.log
          retention-days: 7

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ml-pipeline-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}